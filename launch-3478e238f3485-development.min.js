window.onload = function () {

  // Selectors
  let button = document.querySelector("#get-location");
  let buttonGetWeather = document.querySelector("#get-weather");
  let weatherState = document.querySelector("#weatherState");
  let temperature = document.querySelector("#temperature");

  // Get Lat&Long of user onClick


  const getClientCoordinates = () => {
    navigator.geolocation.getCurrentPosition((position) => {
      let latText = document.querySelector("#latitude");
      let longText = document.querySelector("#longtitude");
      lat = position.coords.latitude;
      long = position.coords.longitude;
      latText.innerText = lat.toFixed(2);
      longText.innerText = long.toFixed(2);
    });
  }
  button.addEventListener("click", getClientCoordinates);
  
  // Parameters for weather API

  let lat;
  let long;
  let weatherData; 
  const apiKey = "8fde928de8ea877b822c4dece4825f77"
 
  // Fetch users weather data
  const getWeatherData = (key) => { 
      fetch("https://api.openweathermap.org/data/2.5/weather?lat=" + lat + "&lon=" + long + "&units=metric&appid=" +  apiKey + "") // Metrisch oder imperial? KÃ¶nnte man auch 
      .then(response => response.json())                                                                                           // dynamisch in der query mitgeben
      .then((data) => {
        weatherData = data
        console.log(weatherData)
        // Display weather Data
        weatherState.innerText = weatherData.weather[0].description
        temperature.innerText = weatherData.main.temp
        pushToDataLayer()
        console.log("sarasdata", window.SARAs_data)
      });
  }
  
  

  // Pushes the users weather state into Data Layer
  const pushToDataLayer = () => {
      window.SARAs_data.push({
      event: 'weatherDone',
      weather_data: {
        weather: weatherData.weather[0].main,
        temperature: weatherData.main.temp.toFixed(0),
        description: weatherData.weather[0].description,
        weatherConditionCode: weatherData.weather[0].id,
        city: weatherData.name,
      },
      user: {
        user_ID: Math.floor(Math.random() * 10000000)
      }
    });
  }
  
  
  buttonGetWeather.addEventListener("click", getWeatherData)


  /* Now that we have the users weather data on our hands, we can now define rules in Adobe Target which then displays Ads in the superbanner_3
   based on the current weather */
  
  
}

let ads = {
  ads: {
    types: [
      {
        rainy : {
          adlist : [
            {
              title: "Kuschelrock",
              url: "www.adserver.com/ads/kuschelrock-ad",
              id: "5235235235",
            },
            {
              title: "Teekanne",
              url: "www.adserver.com/ads/teekanne-ad",
              id: "234234324324",
            },
          ]
        }
      },
      {
        sunny : {
          adlist : [
            {
              title: "Bratmaxe",
              url: "www.adserver.com/ads/bratemaxe-ad",
              id: "23532532532",
            },
            {
              title: "Ratsherrn",
              url: "www.adserver.com/ads/ratsherrn-ad",
              id: "234234234325",
            },
          ]
        }
      }
    ]
  }
}